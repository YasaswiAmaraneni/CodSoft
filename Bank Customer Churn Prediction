{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3322096,"sourceType":"datasetVersion","datasetId":2008274}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:01:27.804717Z","iopub.execute_input":"2025-01-20T16:01:27.805128Z","iopub.status.idle":"2025-01-20T16:01:29.540014Z","shell.execute_reply.started":"2025-01-20T16:01:27.805098Z","shell.execute_reply":"2025-01-20T16:01:29.538790Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"dataset = pd.read_csv(\"/kaggle/input/bank-customer-churn-prediction/Churn_Modelling.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:02:47.409315Z","iopub.execute_input":"2025-01-20T16:02:47.409669Z","iopub.status.idle":"2025-01-20T16:02:47.436170Z","shell.execute_reply.started":"2025-01-20T16:02:47.409641Z","shell.execute_reply":"2025-01-20T16:02:47.435089Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"dataset.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:02:56.555005Z","iopub.execute_input":"2025-01-20T16:02:56.555342Z","iopub.status.idle":"2025-01-20T16:02:56.572550Z","shell.execute_reply.started":"2025-01-20T16:02:56.555318Z","shell.execute_reply":"2025-01-20T16:02:56.571425Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n0          1    15634602  Hargrave          619    France  Female   42   \n1          2    15647311      Hill          608     Spain  Female   41   \n2          3    15619304      Onio          502    France  Female   42   \n3          4    15701354      Boni          699    France  Female   39   \n4          5    15737888  Mitchell          850     Spain  Female   43   \n\n   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n0       2       0.00              1          1               1   \n1       1   83807.86              1          0               1   \n2       8  159660.80              3          1               0   \n3       1       0.00              2          0               0   \n4       2  125510.82              1          1               1   \n\n   EstimatedSalary  Exited  \n0        101348.88       1  \n1        112542.58       0  \n2        113931.57       1  \n3         93826.63       0  \n4         79084.10       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>15634602</td>\n      <td>Hargrave</td>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>15647311</td>\n      <td>Hill</td>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>15619304</td>\n      <td>Onio</td>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>15701354</td>\n      <td>Boni</td>\n      <td>699</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>15737888</td>\n      <td>Mitchell</td>\n      <td>850</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"dataset.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:03:01.564617Z","iopub.execute_input":"2025-01-20T16:03:01.565135Z","iopub.status.idle":"2025-01-20T16:03:01.580785Z","shell.execute_reply.started":"2025-01-20T16:03:01.565101Z","shell.execute_reply":"2025-01-20T16:03:01.579152Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 14 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   RowNumber        10000 non-null  int64  \n 1   CustomerId       10000 non-null  int64  \n 2   Surname          10000 non-null  object \n 3   CreditScore      10000 non-null  int64  \n 4   Geography        10000 non-null  object \n 5   Gender           10000 non-null  object \n 6   Age              10000 non-null  int64  \n 7   Tenure           10000 non-null  int64  \n 8   Balance          10000 non-null  float64\n 9   NumOfProducts    10000 non-null  int64  \n 10  HasCrCard        10000 non-null  int64  \n 11  IsActiveMember   10000 non-null  int64  \n 12  EstimatedSalary  10000 non-null  float64\n 13  Exited           10000 non-null  int64  \ndtypes: float64(2), int64(9), object(3)\nmemory usage: 1.1+ MB\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"dataset.fillna(dataset.median(numeric_only=True), inplace=True)\ndataset.fillna(dataset.mode().iloc[0], inplace=True)  \n\ndataset = pd.get_dummies(dataset, drop_first=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:04:58.934448Z","iopub.execute_input":"2025-01-20T16:04:58.934973Z","iopub.status.idle":"2025-01-20T16:04:59.023486Z","shell.execute_reply.started":"2025-01-20T16:04:58.934940Z","shell.execute_reply":"2025-01-20T16:04:59.022019Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"dataset.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:05:57.849724Z","iopub.execute_input":"2025-01-20T16:05:57.850124Z","iopub.status.idle":"2025-01-20T16:05:57.918232Z","shell.execute_reply.started":"2025-01-20T16:05:57.850095Z","shell.execute_reply":"2025-01-20T16:05:57.917179Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"RowNumber            0\nCustomerId           0\nCreditScore          0\nAge                  0\nTenure               0\n                    ..\nSurname_Zuyev        0\nSurname_Zuyeva       0\nGeography_Germany    0\nGeography_Spain      0\nGender_Male          0\nLength: 2945, dtype: int64"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"dataset.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:06:34.605252Z","iopub.execute_input":"2025-01-20T16:06:34.605687Z","iopub.status.idle":"2025-01-20T16:06:34.649626Z","shell.execute_reply.started":"2025-01-20T16:06:34.605652Z","shell.execute_reply":"2025-01-20T16:06:34.648513Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"         RowNumber    CustomerId   CreditScore           Age        Tenure  \\\ncount  10000.00000  1.000000e+04  10000.000000  10000.000000  10000.000000   \nmean    5000.50000  1.569094e+07    650.528800     38.921800      5.012800   \nstd     2886.89568  7.193619e+04     96.653299     10.487806      2.892174   \nmin        1.00000  1.556570e+07    350.000000     18.000000      0.000000   \n25%     2500.75000  1.562853e+07    584.000000     32.000000      3.000000   \n50%     5000.50000  1.569074e+07    652.000000     37.000000      5.000000   \n75%     7500.25000  1.575323e+07    718.000000     44.000000      7.000000   \nmax    10000.00000  1.581569e+07    850.000000     92.000000     10.000000   \n\n             Balance  NumOfProducts    HasCrCard  IsActiveMember  \\\ncount   10000.000000   10000.000000  10000.00000    10000.000000   \nmean    76485.889288       1.530200      0.70550        0.515100   \nstd     62397.405202       0.581654      0.45584        0.499797   \nmin         0.000000       1.000000      0.00000        0.000000   \n25%         0.000000       1.000000      0.00000        0.000000   \n50%     97198.540000       1.000000      1.00000        1.000000   \n75%    127644.240000       2.000000      1.00000        1.000000   \nmax    250898.090000       4.000000      1.00000        1.000000   \n\n       EstimatedSalary        Exited  \ncount     10000.000000  10000.000000  \nmean     100090.239881      0.203700  \nstd       57510.492818      0.402769  \nmin          11.580000      0.000000  \n25%       51002.110000      0.000000  \n50%      100193.915000      0.000000  \n75%      149388.247500      0.000000  \nmax      199992.480000      1.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>CreditScore</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>10000.00000</td>\n      <td>1.000000e+04</td>\n      <td>10000.000000</td>\n      <td>10000.000000</td>\n      <td>10000.000000</td>\n      <td>10000.000000</td>\n      <td>10000.000000</td>\n      <td>10000.00000</td>\n      <td>10000.000000</td>\n      <td>10000.000000</td>\n      <td>10000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5000.50000</td>\n      <td>1.569094e+07</td>\n      <td>650.528800</td>\n      <td>38.921800</td>\n      <td>5.012800</td>\n      <td>76485.889288</td>\n      <td>1.530200</td>\n      <td>0.70550</td>\n      <td>0.515100</td>\n      <td>100090.239881</td>\n      <td>0.203700</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2886.89568</td>\n      <td>7.193619e+04</td>\n      <td>96.653299</td>\n      <td>10.487806</td>\n      <td>2.892174</td>\n      <td>62397.405202</td>\n      <td>0.581654</td>\n      <td>0.45584</td>\n      <td>0.499797</td>\n      <td>57510.492818</td>\n      <td>0.402769</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.00000</td>\n      <td>1.556570e+07</td>\n      <td>350.000000</td>\n      <td>18.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.00000</td>\n      <td>0.000000</td>\n      <td>11.580000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2500.75000</td>\n      <td>1.562853e+07</td>\n      <td>584.000000</td>\n      <td>32.000000</td>\n      <td>3.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.00000</td>\n      <td>0.000000</td>\n      <td>51002.110000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>5000.50000</td>\n      <td>1.569074e+07</td>\n      <td>652.000000</td>\n      <td>37.000000</td>\n      <td>5.000000</td>\n      <td>97198.540000</td>\n      <td>1.000000</td>\n      <td>1.00000</td>\n      <td>1.000000</td>\n      <td>100193.915000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>7500.25000</td>\n      <td>1.575323e+07</td>\n      <td>718.000000</td>\n      <td>44.000000</td>\n      <td>7.000000</td>\n      <td>127644.240000</td>\n      <td>2.000000</td>\n      <td>1.00000</td>\n      <td>1.000000</td>\n      <td>149388.247500</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>10000.00000</td>\n      <td>1.581569e+07</td>\n      <td>850.000000</td>\n      <td>92.000000</td>\n      <td>10.000000</td>\n      <td>250898.090000</td>\n      <td>4.000000</td>\n      <td>1.00000</td>\n      <td>1.000000</td>\n      <td>199992.480000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"X = dataset.drop('Exited', axis=1)\ny = dataset['Exited']  \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=39)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:07:53.034360Z","iopub.execute_input":"2025-01-20T16:07:53.034845Z","iopub.status.idle":"2025-01-20T16:07:53.101168Z","shell.execute_reply.started":"2025-01-20T16:07:53.034791Z","shell.execute_reply":"2025-01-20T16:07:53.100139Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"log_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)\ny_pred_log_reg = log_reg.predict(X_test)\naccuracy_log_reg = accuracy_score(y_test, y_pred_log_reg)\nprint(\"Logistic Regression:\")\nprint(\"Accuracy:\", accuracy_log_reg)\nprint(classification_report(y_test, y_pred_log_reg))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_log_reg))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:10:15.963603Z","iopub.execute_input":"2025-01-20T16:10:15.964040Z","iopub.status.idle":"2025-01-20T16:10:17.138655Z","shell.execute_reply.started":"2025-01-20T16:10:15.964007Z","shell.execute_reply":"2025-01-20T16:10:17.137550Z"}},"outputs":[{"name":"stdout","text":"Logistic Regression:\nAccuracy: 0.8085\n              precision    recall  f1-score   support\n\n           0       0.81      1.00      0.89      1617\n           1       0.00      0.00      0.00       383\n\n    accuracy                           0.81      2000\n   macro avg       0.40      0.50      0.45      2000\nweighted avg       0.65      0.81      0.72      2000\n\nConfusion Matrix:\n [[1617    0]\n [ 383    0]]\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"dt_model = DecisionTreeClassifier(random_state=42)\ndt_model.fit(X_train, y_train)\ny_pred_dt = dt_model.predict(X_test)\naccuracy_dt = accuracy_score(y_test, y_pred_dt)\nprint(\"\\nDecision Tree:\")\nprint(\"Accuracy:\", accuracy_dt)\nprint(classification_report(y_test, y_pred_dt))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_dt))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:10:53.247338Z","iopub.execute_input":"2025-01-20T16:10:53.247691Z","iopub.status.idle":"2025-01-20T16:10:54.521156Z","shell.execute_reply.started":"2025-01-20T16:10:53.247667Z","shell.execute_reply":"2025-01-20T16:10:54.519898Z"}},"outputs":[{"name":"stdout","text":"\nDecision Tree:\nAccuracy: 0.835\n              precision    recall  f1-score   support\n\n           0       0.89      0.91      0.90      1617\n           1       0.57      0.54      0.56       383\n\n    accuracy                           0.83      2000\n   macro avg       0.73      0.72      0.73      2000\nweighted avg       0.83      0.83      0.83      2000\n\nConfusion Matrix:\n [[1464  153]\n [ 177  206]]\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"rf_model = RandomForestClassifier(random_state=42)\nrf_model.fit(X_train, y_train)\ny_pred_rf = rf_model.predict(X_test)\naccuracy_rf = accuracy_score(y_test, y_pred_rf)\nprint(\"\\nRandom Forest:\")\nprint(\"Accuracy:\", accuracy_rf)\nprint(classification_report(y_test, y_pred_rf))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_rf))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:11:17.369427Z","iopub.execute_input":"2025-01-20T16:11:17.369809Z","iopub.status.idle":"2025-01-20T16:11:29.701117Z","shell.execute_reply.started":"2025-01-20T16:11:17.369778Z","shell.execute_reply":"2025-01-20T16:11:29.699548Z"}},"outputs":[{"name":"stdout","text":"\nRandom Forest:\nAccuracy: 0.8675\n              precision    recall  f1-score   support\n\n           0       0.87      0.98      0.92      1617\n           1       0.85      0.38      0.52       383\n\n    accuracy                           0.87      2000\n   macro avg       0.86      0.68      0.72      2000\nweighted avg       0.87      0.87      0.85      2000\n\nConfusion Matrix:\n [[1591   26]\n [ 239  144]]\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"svm_model = SVC(random_state=42)\nsvm_model.fit(X_train, y_train)\ny_pred_svm = svm_model.predict(X_test)\naccuracy_svm = accuracy_score(y_test, y_pred_svm)\nprint(\"\\nSupport Vector Machine:\")\nprint(\"Accuracy:\", accuracy_svm)\nprint(classification_report(y_test, y_pred_svm))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_svm))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:11:44.874955Z","iopub.execute_input":"2025-01-20T16:11:44.875332Z","iopub.status.idle":"2025-01-20T16:13:12.505328Z","shell.execute_reply.started":"2025-01-20T16:11:44.875301Z","shell.execute_reply":"2025-01-20T16:13:12.503941Z"}},"outputs":[{"name":"stdout","text":"\nSupport Vector Machine:\nAccuracy: 0.8085\n              precision    recall  f1-score   support\n\n           0       0.81      1.00      0.89      1617\n           1       0.00      0.00      0.00       383\n\n    accuracy                           0.81      2000\n   macro avg       0.40      0.50      0.45      2000\nweighted avg       0.65      0.81      0.72      2000\n\nConfusion Matrix:\n [[1617    0]\n [ 383    0]]\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"models_accuracy = {\n    \"Logistic Regression\": accuracy_log_reg,\n    \"Decision Tree\": accuracy_dt,\n    \"Random Forest\": accuracy_rf,\n    \"Support Vector Machine\": accuracy_svm\n}\n\nbest_model_name = max(models_accuracy, key=models_accuracy.get)\nbest_model_accuracy = models_accuracy[best_model_name]\n\nprint(f\"\\nBest Model: {best_model_name} with Accuracy: {best_model_accuracy}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:13:51.010019Z","iopub.execute_input":"2025-01-20T16:13:51.010345Z","iopub.status.idle":"2025-01-20T16:13:51.016423Z","shell.execute_reply.started":"2025-01-20T16:13:51.010322Z","shell.execute_reply":"2025-01-20T16:13:51.015328Z"}},"outputs":[{"name":"stdout","text":"\nBest Model: Random Forest with Accuracy: 0.8675\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"models_accuracy = {\n    \"Logistic Regression\": accuracy_log_reg,\n    \"Decision Tree\": accuracy_dt,\n    \"Random Forest\": accuracy_rf,\n    \"Support Vector Machine\": accuracy_svm\n}\n\n\nplt.figure(figsize=(18, 6))\nplt.bar(models_accuracy.keys(), models_accuracy.values(), color=['blue', 'green', 'red', 'purple'])\n\n\nbest_model_name = max(models_accuracy, key=models_accuracy.get)\nplt.bar(best_model_name, models_accuracy[best_model_name], color='gold')\n\n\nplt.title('Model Accuracy Comparison')\nplt.xlabel('Model')\nplt.ylabel('Accuracy')\nplt.ylim(0, 1)  \n\n\nplt.show()\n\n\nprint(f\"\\nBest Model: {best_model_name} with Accuracy: {models_accuracy[best_model_name]}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-20T16:14:13.714098Z","iopub.execute_input":"2025-01-20T16:14:13.714435Z","iopub.status.idle":"2025-01-20T16:14:13.928168Z","shell.execute_reply.started":"2025-01-20T16:14:13.714410Z","shell.execute_reply":"2025-01-20T16:14:13.927026Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1800x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nBest Model: Random Forest with Accuracy: 0.8675\n","output_type":"stream"}],"execution_count":23}]}